[
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/",
	"title": "AWS CloudFormation",
	"tags": [],
	"description": "",
	"content": "AWS CloudFormation AWS CloudFormation AWS CloudFormation - là một dịch vụ hỗ trợ người dùng mô tả và biểu diễn các tài nguyên cơ sở hạ tầng trên môi trường cloud chỉ với một vài dòng mã lệnh. Dịch vụ cho phép bạn sử dụng ngôn ngữ lập trình hoặc file văn bản để xây dựng mô hình và cung cấp tất cả các tài nguyên cần thiết cho ứng dụng chạy trên bất cứ regions nào hoặc thuộc account nào, một cách tự động và an toàn. Dịch vụ AWS CloudFormation là miễn phí và bạn chỉ phải thanh toán cho những tài nguyên AWS cần thiết cho ứng dụng của bạn.\nAWS CloudShell là một shell dựa trên trình duyệt mà bạn có thể sử dụng để quản lý các dịch vụ AWS bằng cách sử dụng AWS Command Line Interface (AWS CLI) và một số công cụ phát triển đã được cài đặt sẵn.\nNội dung Giới thiệu Các bước chuẩn bị CloudFormation cơ bản CloudFormation nâng cao Dọn dẹp tài nguyên "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.1-customresources/",
	"title": "Các tài nguyên tùy chỉnh",
	"tags": [],
	"description": "",
	"content": "Các tài nguyên tùy chỉnh Bạn có thể mở rộng khả năng sử dụng của CloudFormation với các tài nguyên tùy chỉnh bằng cách ủy quyền công việc cần thực hiện cho một hàm Lambda đã được thiết kế đặc biệt, để tương tác với dịch vụ CloudFormation.\nTrong nội dung của mã code, bạn sẽ cài đặt các hàm tạo, cập nhật và xóa, và hàm gửi phản hồi về trạng thái của hoạt động đó.\nTrong bài lab đầu tiên này, bạn sẽ tạo một tài nguyên tùy chỉnh mà có thể sinh khóa SSH và lưu trữ nó trong kho tham số SSM.\nNội dung Tạo Lambda Function Tạo Stack Kết nối EC2 Instance "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu AWS CloudFormation - là một dịch vụ hỗ trợ người dùng mô tả và biểu diễn các tài nguyên cơ sở hạ tầng trên môi trường cloud chỉ với một vài dòng mã lệnh. Dịch vụ cho phép bạn sử dụng ngôn ngữ lập trình hoặc file văn bản để xây dựng mô hình và cung cấp tất cả các tài nguyên cần thiết cho ứng dụng chạy trên bất cứ regions nào hoặc thuộc account nào, một cách tự động và an toàn. Dịch vụ AWS CloudFormation là miễn phí và bạn chỉ phải thanh toán cho những tài nguyên AWS cần thiết cho ứng dụng của bạn.\nAWS CloudShell là một shell dựa trên trình duyệt mà bạn có thể sử dụng để quản lý các dịch vụ AWS bằng cách sử dụng AWS Command Line Interface (AWS CLI) và một số công cụ phát triển đã được cài đặt sẵn.\n"
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/3-basiccloudformation/3.1-usingcloudshell/",
	"title": "Sử dụng CloudShell",
	"tags": [],
	"description": "",
	"content": "Sử dụng CloudShell Truy cập vào giao diện AWS Management Console Tìm CloudShell Chọn CloudShell Trong giao diện AWS CloudShell Thường thì khi chọn vào dịch vụ AWS CloudShell sẽ tự động tạo ra môi trường CLI cho chúng ta thực thi lệnh. Nhưng trong vài trường hợp, CloudShell sẽ không tự động tạo sẵn, do đó, ta sẽ ấn chọn Open environment – trong đó là tên region khi mở CloudShell. Copy và Paste đoạn lệnh dưới đây vào Terminal của CloudShell để cài đặt các công cụ hỗ trợ xử lý text trên dòng lệnh. sudo yum -y install jq gettext bash-completion Thực hiện cài đặt tool cfn-lint - là công cụ giúp bạn kiểm tra CloudFormation yaml/json templates và các thông tin khác. Bao gồm kiểm tra các thuộc tính của tài nguyên đã chính xác hay chưa hoặc thông tin cấu hình đã theo best practices hay chưa. pip install cfn-lint Kiểm tra cài đặt cfn-lint thành công bằng cách dùng lệnh sau: cfn-lint --version Cài đặt taskcat pip install taskcat Chúng ta sẽ cấu hình aws cli sử dụng Region hiện tại. export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=\u0026lt;REGION\u0026gt; export AZS=($(aws ec2 describe-availability-zones --query \u0026#39;AvailabilityZones[].ZoneName\u0026#39; --output text --region $AWS_REGION)) Thay trường thành id của region mà CloudShell đang mở. Chúng ta sẽ lưu các thông tin cấu hình vào bash_profile echo \u0026#34;export ACCOUNT_ID=$ACCOUNT_ID\u0026#34; | tee -a ~/.bash_profile echo \u0026#34;export AWS_REGION=$AWS_REGION\u0026#34; | tee -a ~/.bash_profile echo \u0026#34;export AZS=${AZS[@]}\u0026#34; | tee -a ~/.bash_profile aws configure set default.region $AWS_REGION aws configure get default.region Chúng ta sẽ sử dụng câu lệnh để kiểm tra CloudShell đang sử dụng IAM Role có chính xác không. aws sts get-caller-identity --query Arn | grep CloudFormation-Role -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34; "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/2-prerequiste/2.1-createiamrole/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role Truy cập giao diện AWS Management Console Trong giao diện IAM Chọn Roles Chọn Create role Trong giao diện Select trusted entity Chọn Custom trust policy Tại phần Custom trust policy, dán đoạn JSON bên dưới vào, nhớ thay \u0026lt;ACCOUNT_ID\u0026gt; bằng AWS Account ID của bạn: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:root\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;, }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;ec2.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } Khi tạo vai trò cho truy cập giữa các tài khoản, quản trị viên sẽ thiết lập mối quan hệ tin tưởng giữa hai tài khoản: tài khoản sở hữu tài nguyên và tài khoản chứa người dùng. Dựa trên điều đó, đoạn JSON trên thể hiện các thực thể đáng tin cậy (trusted entity) như sau:\nTài khoản AWS khác: Trong statement đầu tiên, chúng ta thấy:\n\u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:root\u0026#34; } Điều này chỉ định rằng tài khoản AWS có ID là \u0026lt;ACCOUNT_ID\u0026gt; được tin tưởng. Cụ thể, nó cho phép người dùng root của tài khoản đó (và do đó, bất kỳ người dùng nào trong tài khoản đó được cấp quyền phù hợp) đảm nhận vai trò này.\nDịch vụ AWS: Trong statement thứ hai, chúng ta thấy:\n\u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;ec2.amazonaws.com\u0026#34; } Điều này chỉ định rằng dịch vụ EC2 của AWS được tin tưởng. Điều này có nghĩa là các instance EC2 có thể đảm nhận vai trò này.\nCác điểm quan trọng khác:\nCả hai statement đều cho phép hành động sts:AssumeRole, đây là hành động cần thiết để đảm nhận vai trò. Phiên bản của chính sách này là 2012-10-17, đây là phiên bản tiêu chuẩn cho các chính sách IAM của AWS. Tóm lại, chính sách tin tưởng này cho phép:\nMột tài khoản AWS cụ thể (được xác định bởi \u0026lt;ACCOUNT_ID\u0026gt;)\u0026hellip; Dịch vụ EC2 của AWS\u0026hellip; \u0026hellip;đảm nhận vai trò (role) này. Điều này tạo ra một mối quan hệ tin tưởng giữa tài khoản sở hữu vai trò và các thực thể được chỉ định, cho phép truy cập giữa các tài khoản và cho phép EC2 instances sử dụng vai trò này.\nChọn Next Trong giao diện Create role Tìm policy AdministratorAccess Chọn policy AdministratorAccess Chọn Next Trong giao diện Role details Role name, nhập CloudFormation-Role Description, nhập Allows EC2 instances to call AWS services on your role behalf. Trong phần Step 3: Add tags Nhập Key, ví dụ: Name Nhập Value, ví dụ: CloudFormationWorkshop Chọn Create role Hoàn thành tạo role "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.1-customresources/4.1.1-createlambdafunction/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tạo Lambda Function Truy cập vào giao diện AWS Management Console Tìm IAM Chọn IAM Trong giao diện IAM Chọn Policies Chọn Create policy Trong giao diện Create policy Chọn JSON Sao chép và dán vào đoạn mã sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:CreateKeyPair\u0026#34;, \u0026#34;ec2:DescribeKeyPairs\u0026#34;, \u0026#34;ssm:PutParameter\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DeleteKeyPair\u0026#34;, \u0026#34;ssm:DeleteParameter\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Chọn Next Trong bước Review and create Policy name, Nhập ssh-key-gen-policy Xem các dịch vụ được Allow Trong phần Add tags Nhập Key, ví dụ: Name Nhập Value, ví dụ: CloudFormationWorkshop Chọn Create policy Tạo policy ssh-key-gen-policy thành công Trong giao diện IAM Chọn Roles Chọn Create role Trong bước Select trusted entity Trusted entity type, chọn AWS service User case, chọn Lambda Chọn Next Trong bước Add permissions Tìm và chọn policy ssh-key-gen-policy Chọn Next Trong giao diện Role details Role name, nhập ssh-key-gen-role Kiểm tra lại and trong phần Add tags Nhập Key, ví dụ: Name Nhập Value, ví dụ: CloudFormationWorkshop Chọn Create role Trong giao diện IAM Tìm ssh-key-gen-role Xem role đã tạo Trong giao diện AWS Management Console Tìm Lambda Chọn Lambda Trong giao diện AWS Lambda Chọn Functions Chọn Create function Trong giao diện Create funtion Chọn Author from scratch Function name, nhập ssh-key-gen Run time, chọn Python 3.9 Chọn x86_64 Trong giao diện Permissions Chọn Use an existing role Chọn ssh-key-gen-role Trong nội dung chỉnh sửa Function code, nhập vào nội dung mã lệnh như sau: \u0026#34;\u0026#34;\u0026#34; This lambda implements the custom resource handler for creating an SSH key and storing in in SSM parameter store. e.g. SSHKeyCR: Type: Custom::CreateSSHKey Version: \u0026#34;1.0\u0026#34; Properties: ServiceToken: !Ref FunctionArn KeyName: MyKey An SSH key called MyKey will be created. \u0026#34;\u0026#34;\u0026#34; import os from json import dumps import sys import traceback import urllib.request import boto3 from botocore.exceptions import ClientError def log_exception(): \u0026#34;\u0026#34;\u0026#34;Log a stack trace\u0026#34;\u0026#34;\u0026#34; exc_type, exc_value, exc_traceback = sys.exc_info() print(repr(traceback.format_exception(exc_type, exc_value, exc_traceback))) def send_response(event, context, response): \u0026#34;\u0026#34;\u0026#34;Send a response to CloudFormation to handle the custom resource lifecycle\u0026#34;\u0026#34;\u0026#34; responseBody = { \u0026#39;Status\u0026#39;: response, \u0026#39;Reason\u0026#39;: \u0026#39;See details in CloudWatch Log Stream: \u0026#39; + context.log_stream_name, \u0026#39;PhysicalResourceId\u0026#39;: context.log_stream_name, \u0026#39;StackId\u0026#39;: event[\u0026#39;StackId\u0026#39;], \u0026#39;RequestId\u0026#39;: event[\u0026#39;RequestId\u0026#39;], \u0026#39;LogicalResourceId\u0026#39;: event[\u0026#39;LogicalResourceId\u0026#39;], } print(\u0026#39;RESPONSE BODY: \\n\u0026#39; + dumps(responseBody)) data = dumps(responseBody).encode(\u0026#39;utf-8\u0026#39;) req = urllib.request.Request(event[\u0026#39;ResponseURL\u0026#39;], data, headers={\u0026#39;Content-Length\u0026#39;: len(data), \u0026#39;Content-Type\u0026#39;: \u0026#39;\u0026#39;}) req.get_method = lambda: \u0026#39;PUT\u0026#39; try: with urllib.request.urlopen(req) as response: print(f\u0026#39;response.status: {response.status}, response.reason: {response.reason}\u0026#39;) print(\u0026#39;response from cfn: \u0026#39; + response.read().decode(\u0026#39;utf-8\u0026#39;)) except urllib.error.URLError: log_exception() raise Exception(\u0026#39;Received non-200 response while sending response to AWS CloudFormation\u0026#39;) return True def custom_resource_handler(event, context): \u0026#34;\u0026#34;\u0026#34; This function creates a PEM key, commits it as a key pair in EC2, and stores it, encrypted, in SSM. To retrieve the key with currect RSA format, you must use the command line: aws ssm get-parameter \\ --name \u0026lt;KEYNAME\u0026gt; \\ --with-decryption \\ --region \u0026lt;REGION\u0026gt; \\ --output text Copy the values from (and including) -----BEGIN RSA PRIVATE KEY----- to -----END RSA PRIVATE KEY----- into a file. To use it, change the permissions to 600 Ensure to bundle the necessary packages into the zip stored in S3 \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Event JSON: \\n\u0026#34; + dumps(event)) request_type = event[\u0026#39;RequestType\u0026#39;] resource_properties = event[\u0026#39;ResourceProperties\u0026#39;] response = \u0026#39;FAILED\u0026#39; if event[\u0026#39;ResourceType\u0026#39;] == \u0026#39;Custom::CreateSSHKey\u0026#39;: pem_key_name = resource_properties[\u0026#39;KeyName\u0026#39;] ec2 = boto3.client(\u0026#39;ec2\u0026#39;) ssm_client = boto3.client(\u0026#39;ssm\u0026#39;) if request_type == \u0026#39;Create\u0026#39;: try: # Check if key already exists try: ec2.describe_key_pairs(KeyNames=[pem_key_name]) print(f\u0026#34;Key pair {pem_key_name} already exists. Skipping creation.\u0026#34;) response = \u0026#39;SUCCESS\u0026#39; except ClientError as e: if e.response[\u0026#39;Error\u0026#39;][\u0026#39;Code\u0026#39;] == \u0026#39;InvalidKeyPair.NotFound\u0026#39;: # Key does not exist, create it print(\u0026#34;Creating key name %s\u0026#34; % str(pem_key_name)) key = ec2.create_key_pair(KeyName=pem_key_name) key_material = key[\u0026#39;KeyMaterial\u0026#39;] param = ssm_client.put_parameter(Name=pem_key_name, Value=key_material, Type=\u0026#39;SecureString\u0026#39;) print(param) print(f\u0026#39;The parameter {pem_key_name} has been created.\u0026#39;) response = \u0026#39;SUCCESS\u0026#39; else: raise e except Exception as e: print(f\u0026#39;There was an error {e} creating and committing key {pem_key_name} to the parameter store\u0026#39;) log_exception() response = \u0026#39;FAILED\u0026#39; send_response(event, context, response) return if request_type == \u0026#39;Update\u0026#39;: send_response(event, context, \u0026#39;SUCCESS\u0026#39;) return if request_type == \u0026#39;Delete\u0026#39;: try: print(f\u0026#34;Deleting key name {pem_key_name}\u0026#34;) ssm_client.delete_parameter(Name=pem_key_name) ec2.delete_key_pair(KeyName=pem_key_name) response = \u0026#39;SUCCESS\u0026#39; except Exception as e: print(f\u0026#34;There was an error {e} deleting the key {pem_key_name} from SSM Parameter store or EC2\u0026#34;) log_exception() response = \u0026#39;FAILED\u0026#39; send_response(event, context, response) def lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34;Lambda handler for the custom resource\u0026#34;\u0026#34;\u0026#34; try: return custom_resource_handler(event, context) except Exception: log_exception() raise Hãy cùng nhau phân tích đoạn mã lệnh này có những nội dung gì nhé\nThứ nhất: Hàm Handler - mọi lambda function đều có một hàm handler và chúng được gọi khi có bất kì một sự kiện nào xảy ra. Nội dung của hàm Handler chỉ đơn giản gọi tới một hàm khác chứa nội dung xử lý cụ thể với sự kiện vừa xảy ra.\ndef lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34;Lambda handler for the custom resource\u0026#34;\u0026#34;\u0026#34; try: return custom_resource_handler(event, context) except Exception: log_exception() raise Thứ hai: hàm custom_resource_handler - là hàm chứa nội dung xử lý chi tiết khi có sự sự kiện xảy ra. Cụ thể, hàm sẽ thực hiện xác định loại yêu cầu và gửi trả phản hồi lại cho CloudFormation. if request_type == \u0026#39;Create\u0026#39;: try: # Check if key already exists try: ec2.describe_key_pairs(KeyNames=[pem_key_name]) print(f\u0026#34;Key pair {pem_key_name} already exists. Skipping creation.\u0026#34;) response = \u0026#39;SUCCESS\u0026#39; except ClientError as e: if e.response[\u0026#39;Error\u0026#39;][\u0026#39;Code\u0026#39;] == \u0026#39;InvalidKeyPair.NotFound\u0026#39;: # Key does not exist, create it print(\u0026#34;Creating key name %s\u0026#34; % str(pem_key_name)) key = ec2.create_key_pair(KeyName=pem_key_name) key_material = key[\u0026#39;KeyMaterial\u0026#39;] param = ssm_client.put_parameter(Name=pem_key_name, Value=key_material, Type=\u0026#39;SecureString\u0026#39;) print(param) print(f\u0026#39;The parameter {pem_key_name} has been created.\u0026#39;) response = \u0026#39;SUCCESS\u0026#39; else: raise e except Exception as e: print(f\u0026#39;There was an error {e} creating and committing key {pem_key_name} to the parameter store\u0026#39;) log_exception() response = \u0026#39;FAILED\u0026#39; send_response(event, context, response) return Thứ ba: hàm send_response - là hàm gửi tra kết quả phản hồi cho CloudFormation endpoint dựa trên phương thức HTTP PUTS. def send_response(event, context, response): \u0026#34;\u0026#34;\u0026#34;Send a response to CloudFormation to handle the custom resource lifecycle\u0026#34;\u0026#34;\u0026#34; responseBody = { \u0026#39;Status\u0026#39;: response, \u0026#39;Reason\u0026#39;: \u0026#39;See details in CloudWatch Log Stream: \u0026#39; + context.log_stream_name, \u0026#39;PhysicalResourceId\u0026#39;: context.log_stream_name, \u0026#39;StackId\u0026#39;: event[\u0026#39;StackId\u0026#39;], \u0026#39;RequestId\u0026#39;: event[\u0026#39;RequestId\u0026#39;], \u0026#39;LogicalResourceId\u0026#39;: event[\u0026#39;LogicalResourceId\u0026#39;], } print(\u0026#39;RESPONSE BODY: \\n\u0026#39; + dumps(responseBody)) data = dumps(responseBody).encode(\u0026#39;utf-8\u0026#39;) req = urllib.request.Request(event[\u0026#39;ResponseURL\u0026#39;], data, headers={\u0026#39;Content-Length\u0026#39;: len(data), \u0026#39;Content-Type\u0026#39;: \u0026#39;\u0026#39;}) req.get_method = lambda: \u0026#39;PUT\u0026#39; try: with urllib.request.urlopen(req) as response: print(f\u0026#39;response.status: {response.status}, response.reason: {response.reason}\u0026#39;) print(\u0026#39;response from cfn: \u0026#39; + response.read().decode(\u0026#39;utf-8\u0026#39;)) except urllib.error.URLError: log_exception() raise Exception(\u0026#39;Received non-200 response while sending response to AWS CloudFormation\u0026#39;) return True Chỉnh sửa code và chọn Deploy Sau khi lưu Function, chuyển đến tab Configuration, chọn phần General configuration và nhấn nút Edit Chúng ta sẽ tăng thời gian chờ của Lambda function để tránh lỗi. Đặt thời gian chờ thành 15 minutes rồi nhấn nút Save Sau khi tăng thời gian chờ của Function, thực hiện sao chép Function ARN ra mục ghi nhớ nào đó. Thông tin này sẽ được sử dung ở phần sau của bài hướng dẫn. "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.2-mappingandstackset/",
	"title": "Ánh xạ và Stacksets",
	"tags": [],
	"description": "",
	"content": "Ánh xạ Phần ánh xạ trong CloudFormation template có ý nghĩa trong việc gán một key với một tập các giá trị tương ứng. Ví dụ: nếu bạn muốn thiết lập các giá trị dựa theo region, bạn có thể tạo ánh xạ giữa region đóng vai trò là key với các giá trị chỉ định nằm trong region mà template được triển khai. Điều này có thể đặc biệt hữu ích khi triển khai các gói cài đặt AMI cho global, đó là trường hợp mà ID của các AMI là khác nhau giữa các khu vực.\nStackSets AWS CloudFormation StackSets giúp mở rộng chức năng của Stack bằng cách cho phép bạn tạo, cập nhật hoặc xóa Stack nằm trên trên nhiều Account hoặc trên nhiều Region chỉ với một thao tác duy nhất.\nSử dụng User có quyền quản trị, bạn có thể định nghĩa và quản lý một AWS CloudFormation template, đồng thời sử dụng template này làm cơ sở để triển khai Stack lên các Account và Region mà ta mong muốn.\nVí dụ: bạn có thể dễ dàng thiết lập chính sách AWS CloudTrail hoặc AWS Config trên nhiều Account chỉ bằng một thao tác với StackSet. Bạn cũng có thể sử dụng StackSets để triển khai tài nguyên cho một Account nhưng nằm trên nhiều Region.\nỞ phần này, chúng ta sẽ triển khai một CloudFormation template đơn giản giúp tạo ta EC2 Instance chạy web server. Chúng ta sẽ sử dụng ánh xạ để triển khai chính xác Amazon Linux 2 AMI cho Region đã chọn, trong khi sử dụng StackSets để cấu hình Region nào sẽ triển khai template này. Để cho đơn giản, chúng ta sẽ sử dụng User có quyền quản trị tuyệt đối để thực thi, tuy nhiên thực tế bạn có thể sử dụng tài khoản khác giới hạn về quyền hơn để triển khai StackSets.\nChi tiết bạn có thể truy cập trang Prerequisites: Granting Permissions for Stack Set Operations để biết thêm thông tin về cách cấu hình đúng hai Role cần thiết cho việc triển khai StackSets trên nhiều Account.\nTruy cập giao diện AWS Management Console Tìm CloudFormation Chọn CloudFormation Xem các stack đã tạo Trong giao diện CloudFormation Chọn Stack Chọn Create stack Chọn With new resource (standard) Trong giao diện Create stack CloudFormation template sẽ gọi tới 2 file YAML được viết bởi AWS giúp xác định IAM roles cần thiết cho việc triển khai StackSet. Tạo một file mapping_stackset_iam.yaml Sau đó sao chép và dán nội dụng mã này vào file đồng thời lưu lại: AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: This CloudFormation StackSet deploys two AWS provided CloudFormation templates that add Administrator and Execution Roles required to use AWSCloudFormationStackSetAdministrationRole Resources: AWSCloudFormationStackSetAdministrationRole: Type: AWS::CloudFormation::Stack Properties: TemplateURL: https://s3.amazonaws.com/cloudformation-stackset-sample-templates-us-east-1/AWSCloudFormationStackSetAdministrationRole.yml TimeoutInMinutes: \u0026#39;3\u0026#39; AWSCloudFormationStackSetExecutionRole: Type: AWS::CloudFormation::Stack Properties: TemplateURL: https://s3.amazonaws.com/cloudformation-stackset-sample-templates-us-east-1/AWSCloudFormationStackSetExecutionRole.yml TimeoutInMinutes: \u0026#39;3\u0026#39; Parameters: AdministratorAccountId : !Ref \u0026#39;AccountID\u0026#39; Parameters: AccountID: Type: String Description: Your AWS Account ID MaxLength: 12 MinLength: 12 Bạn có thể tham khảo các template cấu hình Role ở đây:\n1. AWSCloudFormationStackSetAdministrationRole\n2. AWSCloudFormationStackSetExecutionRole\nChọn Template is ready\nChọn Upload a template file\nChọn Choose file\nChọn mapping_stackset_iam.yaml\nChọn Next\nTrong giao diện Specify stack details Stack name, nhập mapping-stacksets-iam AccountID, nhập account id của bạn Chọn Next Trong giao diện Create stack Chọn I acknowledge that AWS CloudFormation might create IAM resources with custom names Chọn I acknowledge that AWS CloudFormation might require the following capability: CAPABILITY_AUTO_EXPAND Chọn Create stack Khoảng vài phút sau, 2 CloudFormation template đã được tạo thành công cùng với Stack. Trong giao diện CloudFormation Chọn Stackset Xem giao diện Stackset Chọn Stackset Trong giao diện Choose a template Bước Permissions, chọn IAM role name Chọn IAM execution role name Trong giao diện Prerequisite Tạo 1 file yaml có tên mapping_stackset_ec2.yml Sao chép nội dung đoạn mã sau vào file mapping_stackset_ec2.yml AWSTemplateFormatVersion: 2010-09-09 Description: This YAML template provisions an Amazon Linux 2 AMI and installs httpd to demonstrate proper operation in various AWS regions Parameters: SourceAccessCIDR: Type: String Description: The CIDR IP range that is permitted to access the instance. We recommend that you set this value to a trusted IP range. Default: 0.0.0.0/0 Mappings: # Mapping of Amazon Linux 2 AMI IDs in every AWS Region # When deploying a StackSet, the template will automatically deploy the proper AMI in each selected region RegionMap: us-east-1: AMI: ami-04681a1dbd79675a5 us-east-2: AMI: ami-0cf31d971a3ca20d6 us-west-1: AMI: ami-0782017a917e973e7 us-west-2: AMI: ami-6cd6f714 ap-south-1: AMI: ami-00b6a8a2bd28daf19 ap-northeast-3: AMI: ami-00f7ef6bf92e8f916 ap-northeast-2: AMI: ami-012566705322e9a8e ap-southeast-1: AMI: ami-01da99628f381e50a ap-southeast-2: AMI: ami-00e17d1165b9dd3ec ap-northeast-1: AMI: ami-08847abae18baa040 ca-central-1: AMI: ami-ce1b96aa eu-central-1: AMI: ami-0f5dbc86dd9cbf7a8 eu-west-1: AMI: ami-0bdb1d6c15a40392c eu-west-2: AMI: ami-e1768386 eu-west-3: AMI: ami-06340c8c12baa6a09 sa-east-1: AMI: ami-0ad7b0031d41ed4b9 Resources: MyEC2Instance: Type: AWS::EC2::Instance Properties: InstanceType: t2.micro ImageId: !FindInMap # !FindInMap will search the above RegionMap and automatically pick the proper AMI ID based on the region where this templte is being deployed - RegionMap - !Ref \u0026#39;AWS::Region\u0026#39; - AMI SecurityGroupIds: - !Ref EC2InstanceSG UserData: \u0026#39;Fn::Base64\u0026#39;: !Sub | #!/bin/bash -ex sudo yum install httpd -y echo \u0026#39;\u0026lt;html\u0026gt;\u0026lt;h1\u0026gt;Your CloudFormation stack successfully deployed in ${AWS::Region}!\u0026lt;/h1\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; \u0026gt;/var/www/html/index.html service httpd start Tags: - Key: Name Value: !Sub ${AWS::StackName} EC2InstanceSG: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: This SG allows you to verify the webserver is operational by allowing HTTP (TCP 80) traffic from your location Tags: - Key: Name Value: !Sub ${AWS::StackName} SecurityGroupIngress: - Description: Permits HTTP traffic to validate that the installed webserver is operational. CidrIp: !Ref SourceAccessCIDR FromPort: 80 IpProtocol: tcp ToPort: 80 Outputs: Website: Description: Webserver URL Value: !Sub \u0026#39;http://${MyEC2Instance.PublicDnsName}\u0026#39; Lưu file mapping_stackset_ec2.yml Chọn Template is ready Template source, chọn Upload a template file Chọn Choose file Chọn mapping_stackset_ec2.yml Chọn Next Trong giao diện Specify StackSet details StackSet name, nhập mapping-stacksets-ec2 Chọn Next Chọn Next Trong giao diện Set deployment options Add stacks to stack set, chọn Deploy new stack Account, chọn Deploy stack in accounts Account numbers, nhập account number của bạn Trong giao diện Specify region Chọn các region bạn muốn triển khai Trong giao diện Deployment options Chọn Next Chọn Submit Tiến trình khởi tạo StackSet sẽ mất khoảng 5 phút cho đến khi thấy được màn hình tương tự bên dưới. Region bạn chọn đều được triển khai StackSet thành công Trong giao diện CloudFormation Chọn Region Asia Pacific-Tokyo Trong Region Asia Pacific-Tokyo Chọn CloudFormation Chọn Stack Truy cập CloudFormation console trên Region Frankurt - là một trong những Region ta đã lựa chọn để triển khai StackSet - thì thấy một Stack mới đã được tạo ra. Điều này chứng tỏ StackSet của chúng ta đã được triển khai thành công. Trong giao diện CloudFormation Chọn tên Stack, nó sẽ dẫn ta tới trang thông tin chi tiết. Chuyển sang tab Output, ta sẽ thấy kết quả website và đường dẫn Chọn đường dẫn và dán vào trình duyệt Kết quả thu được đúng với những gì chúng ta mong đợi. Việc triển khai StackSet đã thực sự thành công. Nếu các bạn đã đi được tới bước này thì xin chúc mừng các bạn! "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Workshop lần này yêu cầu chúng ta phải chọn chính xác Region bởi không phải tất cả các regions đều có số lượng dịch vụ giống nhau, một dịch vụ có thể chạy ở region này nhưng chưa chắc nó đã chạy ở region khác.\nNội dung Tạo IAM Role Tạo IAM User Switch Role "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/3-basiccloudformation/3.2-createcloudformationtemplate/",
	"title": "Tạo CloudFormation Template",
	"tags": [],
	"description": "",
	"content": "Tạo CloudFormation Template Một trong những chìa khóa để làm việc hiệu quả với CloudFormation đó là phải biết được cách sử dụng bảng tham chiếu tài nguyên ở trang AWS Resource and Property Types Reference. Tại đây bạn có thể tìm thấy một danh sách thông tin và định nghĩa về các tài nguyên và các thuộc tính.\nMột CloudFormation template thường bao gồm 9 phần, chi tiết về chúng bạn có thể xem ở Template anatomy. Trong phạm vi workshop, chúng ta chỉ quan tâm tới 5 thành phần chính sau đây: Cấu trúc của một CloudFormation template AWSTemplateFormatVersion (tùy chọn): chỉ ra phiên bản của template. Bản mới nhất là 2010-09-09 và mặc dù đã ra đời cách đây khá lâu vẫn được sử dụng cho tới thời điểm hiện tại.\nDescription (tùy chọn) mô tả thông tin liên quan tới template.\nParameters (tùy chọn): cho phép bạn bổ sung các giá trị tùy chọn vào template mỗi lần ta cấn tạo hoặc update stack.\nResources (bắt buộc): chỉ rõ những tài nguyên AWS nào bạn muốn đưa vào stack để deploy, ví dụ như Amazon EC2 instance hoặc một Amazon S3 bucket.\nOutputs (tùy chọn) xác định những giá trị đầu ra mà bạn có thể import vào những stack khác (để tạo cross-stack references), hoặc làm nội dung phản hồi cho stack , hoặc dể hiển thị trên AWS CloudFormation console.\nTemplate Parameters Với mỗi parameter chúng ta phải chỉ rõ tên và loại cho parameter. Các loại parameter được hỗ trợ bao gồm: String, Number, CommaDelimitedList, List, AWS-Specific Parameter và SSM Parameter. Bên dưới là một số parameter chúng ta sử dụng trong workshop. Chúng bao gồm\nEC2InstanceType - xác định loại Instance sẽ được sử dụng trong template.\nLatestAmiId - cho phép tự động lấy AMI ID mới nhất và đưa nó vào template.\nSubnetID - liệt kê tất cả các Subnet IDs khả dụng có trong region.\nSourceLocation - quy định cách sử dụng regex trong thuộc tính AllowedPattern để đảm bảo giá trị nhập vào là thích hợp, cùng với các giá trị MinLength và MaxLength.\nVPCID - liệt kê các VPCs có sẵn trong region.\nThực hiện tạo một file .yaml bằng Notepad, đặt file name singleec2instance.yaml và dán các nội dung dưới đây vào AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; Description: \u0026#34;Deploy Single EC2 Linux Instance as part of MGT312 Workshop\u0026#34; Parameters: EC2InstanceType: AllowedValues: - t3.nano - t3.micro - t3.small - t3.medium - t3.large - t3.xlarge - t3.2xlarge - m5.large - m5.xlarge - m5.2xlarge Default: t3.small Description: Amazon EC2 instance type Type: String LatestAmiId: Type: \u0026#39;AWS::SSM::Parameter::Value\u0026lt;AWS::EC2::Image::Id\u0026gt;\u0026#39; Default: \u0026#34;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\u0026#34; SubnetID: Description: ID of a Subnet. Type: AWS::EC2::Subnet::Id SourceLocation: Description : The CIDR IP address range that can be used to RDP to the EC2 instances Type: String MinLength: 9 MaxLength: 18 Default: 0.0.0.0/0 AllowedPattern: \u0026#34;(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\u0026#34; ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. VPCID: Description: ID of the target VPC (e.g., vpc-0343606e). Type: AWS::EC2::VPC::Id Resource: Security Group\nVà chúng ta đã thiết lập xong các tham số để có thể tái sử dụng CloudFormaton ở những lần sau. Giờ chúng ta sẽ đi xác định những thành phần bắt buộc, đó là Tài nguyên.\nCần lưu ý rằng việc sử dụng thành thạo tài liệu AWS Resource and Property Types Reference đóng vai trò rất quan trọng trong việc tạo ra CloudFormation template.\nTài nguyên đầu tiên chúng ta thêm vào là Security Group với quy tắc cho phép lưu lượng truy cập trên cổng 80. Ở đây chúng ta sử dụng kỹ thuật Tham chiếu Hàm Nội tại (Intrinsic Function Ref) để trả về giá trị của tham số VPCID.\nAWS CloudFormation cung cấp một số chức năng tích hợp giúp bạn quản lý các Stack và sử dụng các hàm nội tại trong template để gán giá trị cho các thuộc tính chỉ khả dụng tại thời điểm runtime.\nThực hiện sao chép nội dung sau đây rồi dán nối tiếp đoạn code vào file singleec2instance.yaml ở bước trên:\nResources: EC2InstanceSG: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: EC2 Instance Security Group VpcId: !Ref \u0026#39;VPCID\u0026#39; SecurityGroupIngress: - IpProtocol: tcp FromPort: 80 ToPort: 80 CidrIp: !Ref SourceLocation Resource: Instance Role\nỞ bước này chúng ta sẽ đi tạo Role dùng để gán cho EC2 Instance, cho phép nó gửi thông tin giám sát và giao tiếp với AWS Systems Manager Service (SSM). Cùng với đó một InstanceProfile cũng được tạo ra và tham chiếu tới Instance Role.\nĐoạn code cũng sử dụng kỹ thuật Hàm Phụ Nội tại (Intrinsic Function Sub) để thay thế các giá trị trong một chuỗi với Tham số Giả (Pseudo parameters) như AWS::Region và AWS::Partition.\nTham số Giả là những tham số được xác định trước. Chúng ta sẽ không khai báo chúng trong template và sử dụng chúng giống như một tham số thông thường.\nThực hiện sao chép nội dung sau đây rồi dán nối tiếp đoạn code vào file singleec2instance.yaml ở bước trên:\nSSMInstanceRole: Type : AWS::IAM::Role Properties: Policies: - PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - s3:GetObject Resource: - !Sub \u0026#39;arn:aws:s3:::aws-ssm-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::amazon-ssm-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*\u0026#39; Effect: Allow PolicyName: ssm-custom-s3-policy Path: / ManagedPolicyArns: - !Sub \u0026#39;arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\u0026#39; - !Sub \u0026#39;arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy\u0026#39; AssumeRolePolicyDocument: Version: \u0026#34;2012-10-17\u0026#34; Statement: - Effect: \u0026#34;Allow\u0026#34; Principal: Service: - \u0026#34;ec2.amazonaws.com\u0026#34; - \u0026#34;ssm.amazonaws.com\u0026#34; Action: \u0026#34;sts:AssumeRole\u0026#34; SSMInstanceProfile: Type: \u0026#34;AWS::IAM::InstanceProfile\u0026#34; Properties: Roles: - !Ref SSMInstanceRole Resource: EC2 Instance\nTiếp tục xây dựng template với việc xác định EC2 Instance.\nỞ bước này tất cả các thành phần bao gồm các tài nguyên và thông số đã cấu hình trước đó sẽ được tập hợp lại với nhau. Chúng ta sử dụng kỹ thuật Tham chiếu Hàm Nội tại !Ref để gán hoặc tạo ra các tài nguyên và giá trị sinh ra tại thời điểm runtime. Việc sử dụng !Ref cũng ảnh hưởng đến thứ tự tài nguyên được tạo bởi CloudFormation.\nThực hiện sao chép nội dung sau đây rồi dán nối tiếp đoạn code vào file singleec2instance.yaml ở bước trên:\nEC2Instance: Type: \u0026#34;AWS::EC2::Instance\u0026#34; Properties: ImageId: !Ref LatestAmiId InstanceType: !Ref EC2InstanceType IamInstanceProfile: !Ref SSMInstanceProfile NetworkInterfaces: - DeleteOnTermination: true DeviceIndex: \u0026#39;0\u0026#39; SubnetId: !Ref \u0026#39;Subnet\u0026#39; GroupSet: - !Ref EC2InstanceSG Tags: - Key: \u0026#34;Name\u0026#34; Value: \u0026#34;MGMT312-EC2\u0026#34; Outputs\nCuối cùng là phần nội dung Outputs với kết quả trả về là địa chỉ Private IP của Instance - một giá trị thuộc tính của Resource - thông qua sử dụng Hàm Nội tại GettAtt.\nTham chiếu tài liệu AWS Resource and Property Types Reference để tìm kiếm thêm thông tin có thể lấy được nhờ hàm GetAtt hoặc !Ref. Thực hiện sao chép nội dung sau đây rồi dán nối tiếp đoạn code vào file singleec2instance.yaml ở bước trên:\nOutputs: EC2InstancePrivateIP: Value: !GetAtt \u0026#39;EC2Instance.PrivateIp\u0026#39; Description: Private IP for EC2 Instances Kiểm tra lại file template lần cuối: AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; Description: \u0026#34;Deploy Single EC2 Linux Instance\u0026#34; Parameters: EC2InstanceType: AllowedValues: - t3.nano - t3.micro - t3.small - t3.medium - t3.large - t3.xlarge - t3.2xlarge - m5.large - m5.xlarge - m5.2xlarge Default: t3.small Description: Amazon EC2 instance type Type: String LatestAmiId: Type: \u0026#39;AWS::SSM::Parameter::Value\u0026lt;AWS::EC2::Image::Id\u0026gt;\u0026#39; Default: \u0026#34;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\u0026#34; SubnetID: Description: ID of a Subnet. Type: AWS::EC2::Subnet::Id SourceLocation: Description : The CIDR IP address range that can be used to RDP to the EC2 instances Type: String MinLength: 9 MaxLength: 18 Default: 0.0.0.0/0 AllowedPattern: \u0026#34;(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\u0026#34; ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. VPCID: Description: ID of the target VPC (e.g., vpc-0343606e). Type: AWS::EC2::VPC::Id Resources: EC2InstanceSG: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: EC2 Instance Security Group VpcId: !Ref \u0026#39;VPCID\u0026#39; SecurityGroupIngress: - IpProtocol: tcp FromPort: 80 ToPort: 80 CidrIp: !Ref SourceLocation SSMInstanceRole: Type : AWS::IAM::Role Properties: Policies: - PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - s3:GetObject Resource: - !Sub \u0026#39;arn:aws:s3:::aws-ssm-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::amazon-ssm-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*\u0026#39; - !Sub \u0026#39;arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*\u0026#39; Effect: Allow PolicyName: ssm-custom-s3-policy Path: / ManagedPolicyArns: - !Sub \u0026#39;arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\u0026#39; - !Sub \u0026#39;arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy\u0026#39; AssumeRolePolicyDocument: Version: \u0026#34;2012-10-17\u0026#34; Statement: - Effect: \u0026#34;Allow\u0026#34; Principal: Service: - \u0026#34;ec2.amazonaws.com\u0026#34; - \u0026#34;ssm.amazonaws.com\u0026#34; Action: \u0026#34;sts:AssumeRole\u0026#34; SSMInstanceProfile: Type: \u0026#34;AWS::IAM::InstanceProfile\u0026#34; Properties: Roles: - !Ref SSMInstanceRole EC2Instance: Type: \u0026#34;AWS::EC2::Instance\u0026#34; Properties: ImageId: !Ref LatestAmiId InstanceType: !Ref EC2InstanceType IamInstanceProfile: !Ref SSMInstanceProfile NetworkInterfaces: - DeleteOnTermination: true DeviceIndex: \u0026#39;0\u0026#39; SubnetId: !Ref \u0026#39;Subnet\u0026#39; GroupSet: - !Ref EC2InstanceSG Tags: - Key: \u0026#34;Name\u0026#34; Value: \u0026#34;MGMT312-EC2\u0026#34; Outputs: EC2InstancePrivateIP: Value: !GetAtt \u0026#39;EC2Instance.PrivateIp\u0026#39; Description: Private IP for EC2 Instances Thực hiện upload file lên CloudShell bằng cách chọn Actions \u0026gt; Upload file \u0026gt; Chọn file singleec2instance.yaml vừa nãy. Đợi một lúc sẽ thấy hiện thông báo upload file thành công. Để giảm bớt gánh nặng trong việc kiểm tra sai sót của mã lệnh táo template thì ta có thể sử dụng một số công cụ tự động kiểm tra để validate cú pháp dùng trong template. Với CloudFormation workshop lần này, chúng ta sử dụng cfn-lint Thực hiện chạy lệnh sau đây: cfn-lint singleec2instance.yaml Dễ dàng thấy, đã có lỗi xảy ra với CloudFormation template, cụ thể là dòng 97, chúng ta đã sử dụng sai giá trị Subnet. Công cụ cfn-lint thực sự đã làm rất tốt vai trò của mình, phát hiện lỗi sai về cú pháp và thông tin trong template. Thực hiện sửa lại template bằng cách thay giá trị Subnet thành SubnetID, rồi chạy lại lênh cfn-lint. Kết quả lệnh chạy thành công và không có lỗi xảy ra, ngoài cảnh báo về python version. Chúng ta có thể ignore chúng bởi đơn giản chúng ta chỉ đang thực hiện một workshop. Tạo CloudFormation Stack Để tạo được CloudFormation Stack, Cloud9 server bắt buộc phải quyền truy cập và sử dụng dịch vụ EC2 và IAM, do vậy cần thực hiện bổ sung thêm policy cho IAM User đang sử dụng CloudShell. Ví dụ bổ sung thêm các policy cần thiết như AmazonEC2FullAccess, IAMFullAccess Truy cập vào trang AWS Management Console Tìm IAM Chọn IAM Trong giao diện IAM Chọn User Tìm kiếm CloudFormation-User Chọn Role name CloudFormation-User Trong giao diện CloudFormation-Role Chọn Add permissions Chọn Attach policies Trong bước Attach policy to CloudFormation-Role Tìm AmazonEC2FullAccess Chọn AmazonEC2FullAccess Chọn Attach policies Giao diện Attach policies thành công Tiếp tục thực hiện Attach policies Chọn Add permissions Chọn Attach policies Trong bước Attach policy to CloudFormation-Role Tìm IAMFullAccess Chọn IAMFullAccess Chọn Attach policies Giao diện sau khi Attach policies thành công Để chuẩn bị tạo CloudFormation Template chúng ta cần chuẩn bị sẵn VPC và Public subnet Truy cập vào AWS Management Console Tìm VPC Chọn VPC Trong giao diện VPC Chọn Your VPC Chọn VPC mà bạn muốn sử dụng Sao chép VPC ID để sử dụng tạo CloudFormation Template Tương tự subnet cũng thực hiện lặp lại Trong giao diện VPC Chọn Subnets Chọn subnet bạn muốn sử dụng (Public Subnet) Sao chép Subnet ID Sau khi Cloud9 server đã có đủ quyền thực hiện việc tạo các Resource với CloudFormation, trên cửa sổ terminal, chạy lệnh: Bạn thay thế VPC ID và Subnet ID vào lệnh. ParameterValue của ParameterKey=SubnetID thay bằng Subnet ID của ở bước 17 ParameterValue của ParameterKey=VPCID thay bằng VPCID của ở bước 16 aws cloudformation create-stack --stack-name asg-cloudformation-stack --template-body file://singleec2instance.yaml --parameters ParameterKey=SubnetID,ParameterValue=\u0026lt;SubnetID\u0026gt; ParameterKey=VPCID,ParameterValue=\u0026lt;VPCID\u0026gt; --capabilities CAPABILITY_IAM --region us-east-1 Tiến hành kiểm tra quá trình khởi tạo CloudFormation Template Truy cập AWS Management Console Tìm CloudFormation Chọn CloudFormation Trong giao diện CloudFormation Chọn Stack details Chọn Stack có tên asg-cloudformation-stack Chọn Events Xem các event khởi tạo Khi Status chuyển sang CREATE_COMPLETE là khởi tạo thành công Trong giao diện CloudFormation Chọn Stack details Chọn stack vừa tạo Chọn Resource Xem thông tin các Resource khởi tạo thành công Trong giao diện CloudFormation Chọn Stack details Chọn stack vừa tạo Chọn Parameters Xem thông tin các Key-Value khởi tạo Trong giao diện CloudFormation Chọn Stack details Chọn stack vừa tạo Chọn Outputs Kết quả nhận được 1 EC2Instance Để kiểm chứng EC2 Instance được khởi tạo Truy nhập vào trang AWS Management Console Tìm EC2 Chọn EC2 Trong giao diện EC2 Chọn Instances Chọn instance được khởi tạo Chọn Details để xem thông tin chi tiết "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/2-prerequiste/2.2-createiamuser/",
	"title": "Tạo IAM User",
	"tags": [],
	"description": "",
	"content": "Tạo IAM User Mở giao diện AWS Management Console Tìm IAM Chọn IAM Trong giao diện IAM Chọn Users Chọn Add users Trong phần Add user User name, nhập CloudFormation-user Chọn Access key - Programmatic access Chọn Password - AWS Management Console access Chọn Custom password Nhập password Chọn Show password Bỏ chọn Require password reset Chọn Next:Permissions Trong giao diện Set permissions Chọn Attach existing policies directly Tìm và chọn AdministratorAccess Chọn Next:Tags Trong phần Tags Nhập Key, ví dụ: Name Nhập Value, ví dụ: CloudFormationWorkshop Chọn Create user Tạo user thành công Xem thông tin user tại phần Console sign-in details Chọn Download.csv file Chọn Return to users list Vậy đã tạo user thành công "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.1-customresources/4.1.2-createstack/",
	"title": "Tạo Stack",
	"tags": [],
	"description": "",
	"content": "Tạo Stack Truy cập vào AWS Management Console Tìm CloudFormaton Chọn CloudFormation Trong giao diện CloudFormation Chọn Stack Chọn Create stack Chọn With new resources (standard) Trong giao diện Create stack Tạo một file custom_resource_cfn_mr.yml Sau đó sao chép và dán nội dung mã này vào file đồng thời lưu lại: Parameters: SourceAccessCIDR: Type: String Description: The CIDR IP range that is permitted to access the instance. We recommend that you set this value to a trusted IP range. Default: 0.0.0.0/0 SSHKeyName: Type: String Description: The name of the key that will be created Default: MyKey01 AMIID: Type: \u0026#39;AWS::SSM::Parameter::Value\u0026lt;AWS::EC2::Image::Id\u0026gt;\u0026#39; Description: The AMI ID that will be used to create EC2 instance Default: \u0026#34;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\u0026#34; VPCPublicSubnet: Type: AWS::EC2::Subnet::Id Description: Choose a public subnet in the selected VPC VPC: Type: AWS::EC2::VPC::Id Description: The VPC in which to launch the EC2 instance. We recommend you choose your default VPC. FunctionArn: Type: String Description: The ARN of the lambda function that implements the custom resource Resources: SSHKeyCR: Type: Custom::CreateSSHKey Properties: ServiceToken: !Ref FunctionArn KeyName: !Ref SSHKeyName MyEC2Instance: Type: AWS::EC2::Instance Properties: KeyName: !Ref SSHKeyName InstanceType: t2.micro ImageId: !Ref AMIID IamInstanceProfile: !Ref EC2InstanceProfile SecurityGroupIds: - !Ref EC2InstanceSG SubnetId: !Ref VPCPublicSubnet Tags: - Key: Name Value: Cfn-Workshop-Reinvent-2018-Lab1 DependsOn: SSHKeyCR EC2InstanceProfile: Type: AWS::IAM::InstanceProfile Properties: Roles: - Ref: EC2InstanceRole Path: \u0026#34;/\u0026#34; DependsOn: EC2InstanceRole EC2InstanceRole: Type: AWS::IAM::Role Properties: Policies: - PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - s3:GetObject Resource: \u0026#34;*\u0026#34; Effect: Allow PolicyName: s3-policy - PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - logs:CreateLogStream - logs:GetLogEvents - logs:PutLogEvents - logs:DescribeLogGroups - logs:DescribeLogStreams - logs:PutRetentionPolicy - logs:PutMetricFilter - logs:CreateLogGroup Resource: - arn:aws:logs:*:*:* - arn:aws:s3:::* Effect: Allow PolicyName: cloudwatch-logs-policy - PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - ec2:AssociateAddress - ec2:DescribeAddresses Resource: \u0026#34;*\u0026#34; Effect: Allow PolicyName: eip-policy Path: \u0026#34;/\u0026#34; AssumeRolePolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Action: - sts:AssumeRole Principal: Service: - ec2.amazonaws.com Effect: Allow EC2InstanceSG: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: This should allow you to SSH to the instance from your location VpcId: !Ref VPC Tags: - Key: Name Value: !Sub ${AWS::StackName} SecurityGroupIngress: - Description: This should allow you to SSH from your location into an EC2 instance CidrIp: !Ref SourceAccessCIDR FromPort: 22 IpProtocol: tcp ToPort: 22 Outputs: MyEC2InstanceDNSName: Description: The DNSName of the new EC2 instance Value: !GetAtt MyEC2Instance.PublicDnsName MyEC2InstancePublicIP: Description: The Public IP address of the newly created EC2 instance Value: !GetAtt MyEC2Instance.PublicIp Chọn Template is ready Chọn Upload a template file Chọn Choose file Chọn custom_resource_cfn_mr.yml Chọn Next Phần Stack name, nhập ssh-key-gen-cr Trong giao diện Create satck AMI ID, để nguyên mặc định FunctionArn, nhập Arn của Lambda function đã tạo SSHKeyName, nhập tên key pair sẽ tạo SourceAccessCIDR, nhập 0.0.0.0/0 Chọn VPC Chọn Public Subnet Trong phần Add tags Nhập Key, ví dụ: Name Nhập Value, ví dụ: CloudFormationWorkshop Chọn Next Trong giao diện Create stack Chọn I acknowledge that AWS CloudFormation might create IAM resources Chọn Create stack Trong giao diện CloudFormation Chọn Stack Chọn ssh-key-gen-cr stack Chọn Event để xem các event khởi tạo. Qúa trình khởi tạo chuyển sang CREATE_COMPLETE là thành công Trong giao diện CloudFormation Chọn Resources Xem các resource đã khởi tạo Trong giao diện CloudFormation Chọn Parameters Xem thông tin Key-Value Trong giao diện CloudFormation Chọn Outputs Xem instance đã được khởi tạo Trong giao diện AWS Management Console Tìm EC2 Chọn EC2 Trong giao diện EC2 Chọn Instances Chọn instance vừa tạo Chọn Details Chọn public IPv4 address Xem IAM Role "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/3-basiccloudformation/",
	"title": "CloudFormation cơ bản",
	"tags": [],
	"description": "",
	"content": "CloudFormation cơ bản Sau khi hoàn thành bài lab chúng ta có thể đã cảm thấy quen thuộc hơn một chút với AWS CloudFormation thông qua việc tạo một CloudFormation template và biết thêm một vài tính năng cơ bản của CloudFormation, và cách kiểm tra template.\nĐồng thời chúng ta cũng đã cùng nhau học cách khởi chạy một CloudFormation template sử dụng AWS CLI tạo ra một Stack đơn giản.\nNếu đã cảm thấy tự tin nắm chắc nội dung phần 1, hãy chuyển sang phần 2 của bài Workshop để tìm hiểu thêm các tính năng tuyệt vời khác của CloudFormation nhé!\nNội dung Sử dụng CloudShell Tạo CloudFormation Template "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.3-driftdetection/",
	"title": "Drift Detection",
	"tags": [],
	"description": "",
	"content": "Drift Detection AWS CloudFormation cho phép bạn phát hiện sự thay đổi cấu hình về mặt tài nguyên của Stack gây ra bởi AWS Management Console, CLI, và SDKs. Drift là sự khác biệt giữa cấu hình tài nguyên dự kiến của Stack xác định bởi các CloudFormation template với cấu hình tài nguyên thực tế của nó trên CloudFormation. Tính năng này giúp bạn quản lý các Stack tốt hơn và đảm bảo tính nhất quán trong các cấu hình tài nguyên. Để có thêm thông tin chi tiết về Drift, hãy tham khảo Blog AWS.\nTrong bài thực hành lần này, chúng ta sẽ tạo một CloudFormation Stack rồi thay đổi cấu hình tài nguyên của nó sử dụng AWS Management Console.\nTruy cập vào giao diện AWS Management Console Tìm CloudFormation Chọn CloudFormation Trong giao diện CloudFormation Chọn Stack Chọn Create stack Chọn With new resources (standard) Trong giao diện Create stack Tạo một file my_cfn_stack.yml Sau đó sao chép và dán đoạn mã này đồng thời lưu lại: AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; Resources: InputQueue: Type: \u0026#34;AWS::SQS::Queue\u0026#34; Properties: QueueName: \u0026#34;DriftLab-InputQueue\u0026#34; VisibilityTimeout: 30 RedrivePolicy: deadLetterTargetArn: Fn::GetAtt: - \u0026#34;DeadLetterQueue\u0026#34; - \u0026#34;Arn\u0026#34; maxReceiveCount: 5 DeadLetterQueue: Type: \u0026#34;AWS::SQS::Queue\u0026#34; Properties: QueueName: \u0026#34;DriftLab-ErrorQueue\u0026#34; Chọn Template is ready Chọn Upload a template file Chọn Choose file Chọn my_cfn_stack.yml Chọn Next Trong giao diện Specify stack details Stack name, nhập drift-lab-with-sqs Chọn Next Chọn Next Chọn Submit Trong giao diện CloudFormation Chọn Stack details Chọn stack vừa tạo Chọn Event xem các event khởi tạo Trạng thái chuyển sang CREATE_COMPLETE là khởi tạo thành công Trong giao diện CloudFormation Chọn Stack details Chọn stack vừa tạo Chọn Resources Xem các resource vừa tạo Trong giao diện CloudFormation Chọn stack vừa tạo Chọn Stack actions Chọn Detect drift Trong giao diện CloudFormation Chọn stack vừa tạo Chọn Stack info Xem Drift status chuyển sang IN_SYNC Truy cập vào giao diện AWS Management Console Tìm Simple Queue Service Chọn Simple Queue Service Trong giao diện Amazon SQS Chọn DriftLab-InputQueue Chọn Edit Trong giao diện Configuration Visibility timeout, nhập 50 Delivery delay, nhập 120 Chọn Save Giao diện AWS SQS edit thành công Trong giao diện CloudFormation Chọn Stack details Chọn drift-lab-with-sqs Chọn Stack info Chọn Stack actions Chọn Detect drift Trong giao diện CloudFormation Chọn Stack details Chọn Stack info Xem Drift status chuyển sang DRIFTED Trong giao diện CloudFormation Chọn Stack details Chọn Stack info Chọn Stack actions Chọn View drift results Trong giao diện Drifts Xem Drift status Xem Resource drift status, InputQueue chuyển Drift status sang MODIFIED "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/4.1-customresources/4.1.3-connectec2instance/",
	"title": "Kết nối EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Kết nối EC2 Instance Trong giao diện AWS Management Console Tìm Systems Manager Chọn Systems Manager Trong giao diện AWS Systems Manager Chọn Parameter Store Trong giao diện Parameters Store Chọn My parameters Chọn MyKey01 Trong giao diện MyKey01 Chọn Overview Xem Last modified user Chọn Show Value Sao chép value và lưu cloudformation.pem Sử dụng PuTTY Key Generator load key và Save private key Sử dụng PuTTY để kết nối EC2 Instance Khi kết nối nhập user name:ec2-user Sử dụng lệnh ifconfig -a để hiển thị thông tin của tất cả giao diện mạng Thực hiện ping amazon.com -c5 để kiểm tra kết nối "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/2-prerequiste/2.3-switchrole/",
	"title": "Switch Role",
	"tags": [],
	"description": "",
	"content": "Switch Role Mở giao diện AWS Management Console Tìm IAM Chọn IAM Trong giao diện IAM Chọn Users Chọn user CloudFormation-user vừa tạo ở bước trước Tại giao diện user CloudFormation-user Chọn Permissions Chọn Add permissions Chọn Create inline policy Tại giao diện Specify permissions Tại phần Policy editor, chuyển sang chế độ JSON Dán đoạn JSON bên dưới vào, nhớ thay \u0026lt;ACCOUNT_ID\u0026gt; bằng AWS Account ID của bạn: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/CloudFormation-Role\u0026#34; } ] } Chọn Next Tại phần Policy details Policy name, nhập CloudFormation-switchrole Chọn Create policy Hoàn thành việc thêm một Policy vào user CloudFormation-user Tiến hành switch role để bắt đầu bài workshop Tại giao diện Switch Role Account ID, nhập AWS Account ID của bạn IAM role name, nhập CloudFormation-Role, nhớ thay \u0026lt;ACCOUNT_ID\u0026gt; bằng AWS Account ID của bạn Chọn Switch Role Hoàn thành bước switch role Tại góc trái trên, ta sẽ thấy CloudFormation-Role @ \u0026lt;ACCOUNT_ID\u0026gt;, nghĩa là đã switch role thành công "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/4-advancedcloudformation/",
	"title": "CloudFormation nâng cao",
	"tags": [],
	"description": "",
	"content": "CloudFormation nâng cao Trong nội dung nâng cao này, chúng ta cùng nhau khám phá thêm các chức năng phức tạp hơn của AWS CloudFormation, từ đó giúp bạn cải thiện thêm kỹ năng làm việc với các template phức tạp. Ngoài ra chúng ta còn học được cách sử dụng các tài nguyên tùy chỉnh của AWS CloudFormation, ánh xạ và ràng buộc, cách tạo StackSets và macros để tăng hiệu quả trong việc tự động hóa cơ sở hạ tầng, đồng thời giải quyết các yêu cầu kinh doanh phức tạp.\nNội dung Các tài nguyên tùy chỉnh Ánh xạ và StackSet Drift Detection "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xoá môi trường CloudShell Chọn Region chứa môi trường cần xóa Trong giao diện CloudShell, chọn Actions Chọn Delete Xác thực xóa môi trường bằng cách điền Delete và chọn Delete Xoá stack trong AWS CloudFormation console Truy cập vào trang AWS CloudFormation Trong giao diện CloudFormation chọn Stack Chọn Stack cần xóa Chọn Delete Xác minh xóa stack Đợi vài phút stack chuyển trạng thái sang DELETE_COMPLETE là xóa thành công Xoá StackSets Truy cập vào trang AWS CloudFormation Chọn StackSets Chọn Stackset cần xóa Chọn Actions sau đó chọn Delete StackSet Xác minh xóa stack set và chọn Delete StackSet Xoá Lambda Functions Truy cập vào trang Lambda Chọn Functions Chọn (các) hàm cần xoá Chọn Actions sau đó chọn Delete Xác minh xóa (các) hàm và chọn Delete Xoá User Truy cập vào trang AWS IAM Chọn Users Chọn User cần xóa Xác minh xóa user và chọn Delete user Xoá Role Truy cập vào trang AWS IAM Chọn Roles Chọn các Roles cần xóa Xác minh xóa role và chọn Delete "
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://tienmat999.github.io/000037-AWSCloudFormation/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]