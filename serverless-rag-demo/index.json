[
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/5.1-cloudformation/",
	"title": "CloudFormation",
	"tags": [],
	"description": "",
	"content": " Access the AWS Console, search for the CloudFormation service In the sidebar, select Stack, choose the stack you want to delete, then click Delete Continue by clicking Delete to confirm the stack deletion Based on the steps above, delete the following stacks in order:\nAppRunnerHostingdevStack ApiGwLlmsLambdadevStack LlmsWithServerlessRagdevStack CDKToolkit Delete them in order, don\u0026rsquo;t worry about the Nested stacks (as the Nested stacks will be automatically deleted along with the main stack)\nNext, we will clean up the resources for the Amazon Cognito service.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/2-deploy/2.1-createadminuser/",
	"title": "Create an Admin User to deploy this stack",
	"tags": [],
	"description": "",
	"content": "Section 1 - Create an IAM user with Administrator permissions (OPTIONAL: If you\u0026rsquo;re already an Admin role, you may skip this step) Search for the service IAM on the AWS Console and go the IAM Dashboard Click on Roles tab under Access management and click on Create role Select AWS Account and click Next Under permissions select AdministratorAccess Give the role a name and description, for example: Deploy-Admin and click on Create role You can now assume this role and proceed to deploy the stack. Click on Switch role Provide optional display name and click on Switch Role Proceed to CloudShell step "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/4-advanced/4.1-createknowledgebase/",
	"title": "Create an Amazon Bedrock Knowledge base",
	"tags": [],
	"description": "",
	"content": " Access AWS Console, search for the Amazon Bedrock service In the sidebar, select Knowledge bases, then click Create knowledge base Name your knowledge base (optional) In the Choose data source section, select Web Crawler, then click Next Name your data source (optional). In the Source URLs section, enter https://gohugo.io/documentation/, then click Next In the Embeddings model section, select Embed Multilingual v3 - By Cohere, then click Next Review the settings you\u0026rsquo;ve configured, then click Create knowledge base After the knowledge base is created, click Go to data sources Select the existing Data source, then click Sync The data synchronization process will take some time, depending on the provided data source.\nAfter completing the data synchronization process, we will test the knowledge base. Click Select model Choose Anthropic as the Model providers Select the Claude 3.5 Sonnet model Click Apply Enter a question and check the answer The process of creating the knowledge base is complete. We will note down the information about the Embeddings model, Collection ARN, and Vector index name "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/1-prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "Prerequisites An AWS account You should have access to Anthropic Claude-3 Haiku/Sonnet models on Amazon Bedrock For RAG, you should have access to (at least) Cohere English Embed model on Amazon Bedrock Amazon Bedrock supported regions Amazon OpenSearch serverless (AOSS) supported regions Familiarity with below Services AWS IAM AWS Lambda Amazon API Gateway Amazon OpenSearch serverless Workshops should be done Creating your first AWS account Administration of access rights with AWS IAM (Identity and Access Management) Book store - Serverless Book store Intro - Writing first functions Serverless - Build Frontend to call API Gateway Serverless - Authentication with Amazon Cognito "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/",
	"title": "Serverless RAG demo",
	"tags": [],
	"description": "",
	"content": "Scalable RAG solutions/Agentic Workflows with Amazon Bedrock and Amazon Opensearch serverless service Overview Widespread AI adoption is being driven by generative AI models that can generate human-like content. However, these foundation models are trained on general data making it less effective for domain specific tasks. There lies the importance of Retrieval Augmented Generation (RAG). RAG allows augmenting prompts with relevant external data for better domain-specific outputs. With RAG, documents and queries are converted to embeddings, compared to find relevant context, and that context is appended to the original prompt before being passed to the LLM. Knowledge libraries can be updated asynchronously to provide the most relevant external data for augmenting prompts.\nAmazon OpenSearch Serverless (AOSS) offers vector engine to store embeddings for faster similarity searches. The vector engine provides a simple, scalable, and high-performing similarity search capability in Amazon OpenSearch Serverless that makes it easy for you to build generative artificial intelligence (AI) applications without having to manage the underlying vector database infrastructure.\nThis workshop offers a production ready easily deployable Generative AI solution with the below features:\nDocument chat Multi-Agent collaboration Sentiment Analysis OCR PII Redaction Architecture Architecture overview Operational Excellence The Serverless RAG demo pushes metrics to Amazon CloudWatch at various stages to provide observability into the infrastructure; Lambda functions, AI services, Amazon S3 buckets, and the rest of the solution components. Continuous integration and continuous delivery (CI/CD) and infrastructure deployment are managed in code through AWS App Runner.\nSecurity Content designer UI app users are authenticated and authorized with Amazon Cognito. All inter-service communications use AWS Identity and Access Management (IAM) roles. All roles used by the solution follows least-privilege access. That is, it only contains minimum permissions required so the service can function properly. Communication end user using Amazon API Gateway and handed by Amazon Cognito. All data storage including Amazon S3 buckets have encryption at rest. Reliability The solution uses AWS Serverless Services wherever possible (examples Lambda, API Gateway, Amazon S3, and Amazon OpenSearch Serverless) to ensure high availability and recovery from service failure. The solution protects against state machine definition errors by having automated tests performed on the solution. Performance Efficiency The solution as mentioned earlier uses serverless architecture throughout this solution. The solution can be launched in any Region that supports AWS services in this solution such as: AWS Lambda, Amazon API Gateway, AWS S3, Amazon OpenSearch Services, Amazon Bedrock, and Amazon SageMaker. Cost Optimization The solution uses serverless architecture therefore, customers only get charged for what they use. The compute layer defaults to AWS Lambda, so it provides pay per use. Amazon OpenSearch Serverless indexes are selected to reduce throughput cost for queries. Sustainability The solution utilizes managed and serverless services, to minimize the environmental impact of the backend services. A critical component for sustainability provided by the solution is maximizing the usage of the AWS AI services. The solution Serverless design (using Lambda and Amazon OpenSearch Serverless) and the use of managed services (such as AWS App Runner) are aimed at reducing carbon footprint compared to the footprint of continually operating on-premises servers.\nContent Prerequisites Deploying the Solution to your AWS account with AWS Cloudshell (Advanced) Using an existing Bedrock Knowledge base "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/5.2-cognito/",
	"title": "Amazon Cognito",
	"tags": [],
	"description": "",
	"content": " Access the AWS Console, search for the Cognito service Find the user pool named rag-llm-user-pool-*, click Delete Next, we will clean up resources for the Amazon S3 service.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/4-advanced/4.2-applyknowledgebase/",
	"title": "Apply the knowledge base to the Serverless RAG demo",
	"tags": [],
	"description": "",
	"content": " Get the information about Embeddings model, Collection ARN, and Vector index name used by the existing knowledge base on Bedrock Access the AWS Console, search for the Amazon OpenSearch service Access Amazon OpenSearch Serverless and search by ARN to get the OpenSearch Endpoint Find the ID of the Embedding model used by Bedrock KB from here Access the AWS Console, search for the Lambda service Find the lambda function bedrock_rag_query_, then proceed with the following setup steps Select the Configuration tab Choose Environment variables Click Edit Set up as follows:\na. IS_BEDROCK_KB = yes\nb. OPENSEARCH_VECTOR_ENDPOINT = \u0026laquo;Amazon OpenSearch Serverless Endpoint of the existing Bedrock KB\u0026raquo; (not including https://)\nc. EMBED_MODEL_ID = \u0026laquo;Embedding Model ID used by the existing Bedrock KB\u0026raquo;\nd. VECTOR_INDEX_NAME = \u0026laquo;VECTOR_INDEX used by the existing Bedrock KB\u0026raquo;\nThen click Save Get the ARN of the Lambda role Select the Configuration tab Choose Permissions Click on the link at Role name In the role interface, note down the ARN of that role Go back to the Amazon OpenSearch tab from step 3. In the Data access section, access the Associated policy link, then click Edit Select Add principals, click IAM users and roles Provide the ARN of the role noted in step 7, then click Save Complete Now try Document Chat on the user interface, it will query from the Amazon Bedrock knowledge base. "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/2-deploy/2.2-deployragbasedsolution/",
	"title": "Deploy the RAG based Solution",
	"tags": [],
	"description": "",
	"content": "Section 2 - Deploy this RAG based Solution (The below commands should be executed in the region of deployment) Switch to Admin role. Search for CloudShell service on the AWS Console and follow the steps below to clone the github repository Git clone the serverless-rag-demo repository from aws-samples git clone https://github.com/aws-samples/serverless-rag-demo.git Go to the directory where we have the downloaded files. cd serverless-rag-demo Fire the bash script that creates the RAG based solution. Pass the environment and region for deployment. environment can be dev, qa, sandbox by running different commands like sh creator.sh dev, sh creator.sh qa or sh creator.sh sandbox (default is dev). (Look at Prerequisites to deploy to the correct region.) sh creator.sh Type 1 to select the N.Virginia region Type 1 to select the Deploy Amazon OpenSearch Serverless vertor engine for RAG option. Press Enter to proceed with deployment of the stack or Ctrl + C to exit The UI is hosted on AppRunner the link to AppRunner could be found in CloudShell once the script execution is complete, or you could also go to the AppRunner service on the AWS Console and obtain the https url. The UI is authenticated through Amazon Cognito hence the very first time you would have to sign-up and then sign-in to login to the application On Amazon Bedrock page enable access to the below models "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/2-deploy/",
	"title": "Deploying the Solution to your AWS account with AWS Cloudshell",
	"tags": [],
	"description": "",
	"content": "Content Create an Admin User to deploy this stack Deploy the RAG based Solution "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/5.3-s3/",
	"title": "Amazon S3",
	"tags": [],
	"description": "",
	"content": " Access the AWS Console, search for the S3 service Find the S3 Bucket named cdk-*-assets-*, click Empty Confirm emptying the bucket Then click delete bucket configuration Confirm deleting the bucket Next, we will clean up the knowledge base in the Amazon Bedrock service.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/3-explore/",
	"title": "Explore the solution features",
	"tags": [],
	"description": "",
	"content": "Features First login When users log in for the first time and click on features, the application will require them to sign in or create a new account. Account information will be stored encrypted in Amazon Cognito. User accounts will be verified through email. Doc Chat/Doc Management (Multi-lingual) Multi-Agent Demo Sentiment Analysis OCR PII Redaction "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/4-advanced/",
	"title": "(Advanced) Using an existing Bedrock Knowledge base",
	"tags": [],
	"description": "",
	"content": "Section 4 will guide you through creating an Amazon Bedrock knowledge base with data sourced from https://gohugo.io/documentation/ - this is the documentation website for Hugo, the platform used to create this workshop.\nContents Create Amazon Bedrock knowledge base Apply the knowledge base to the Serverless RAG demo "
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/5.4-knowledgebase/",
	"title": "Amazon Bedrock Knowledge base",
	"tags": [],
	"description": "",
	"content": " Access the AWS Console, search for the Amazon Bedrock service In the sidebar, select Knowledge bases, choose the knowledge base to delete, click Delete Confirm deleting the knowledge base Next, we will clean up roles in the Identity and Access Management (IAM) service.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Section 5 will guide you through cleaning up resources for this workshop. For efficient cleaning, please follow the order, starting with the CloudFormation service.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/5-cleanup/5.5-iam/",
	"title": "Identity and Access Management (IAM)",
	"tags": [],
	"description": "",
	"content": " Access the AWS Console, search for the IAM service In the sidebar, select Roles, find the DeployAdmin role created in section 2.1, select that role, click Delete Confirm deleting the role Complete the resource cleanup process. End of workshop.\n"
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://tienmat999.github.io/serverless-rag-demo/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]